<div class="navbar">
  <a href="/" class="navbar-header">filemanager</a>
</div>
<div class="main">
  <div class="side-info-2">
    <div class="showfile-btns-div">
      <button class="font-minus">font -</button>
      <button class="colors">kolory</button>
      <button class="font-plus">font +</button>
    </div>
    <button class="side-info-button save-settings">zapisz ustawienia</button>
    <button class="side-info-button change-name">zmiana nazwy</button>
    <form action="/viewFile" method="post">
      <button type="submit" class="file-preview">podgląd pliku</button>
      <input type="hidden" name="root" value="{{root}}" />
      <input type="hidden" name="id" value="{{fileRoot}}">

    </form>
  </div>
  <div class="side-files">
    <div class="file-path-name">
      <p>{{fileRoot}}</p>
    </div>
    <div class="numbering">
    </div>
    <form class="edit-file-form" method="post">
      <textarea id="textarea" cols="180" rows="30">
     {{fileContent}}
    </textarea>
      <button type="submit" style="margin-left: 15px;" class="side-info-button save-changes">zapisz zmiany</button>
      <input class="area-content" type="hidden" name="areaContent">
      <input type="hidden" name="id" value="{{fileRoot}}">
    </form>
  </div>
</div>
<dialog class="edit-folder-dialog">
  <form action="/changeFileName" method="post" class="dialog-form">
    <p class="dialog-p">zmiana nazwy pliku <span class="change-rootname">{{fileName}}</span> </p>
    <input class="hidden-root" type="hidden" name="root" value="{{root}}" />
    <input type="hidden" name="folderName" value="{{getNamePath root}}">
    <input class="prev-file-name" type="hidden" name="previousName" value="{{fileRoot}}">
    <input type="text" name="inputText" class="input-text">
    <div class="buttons-div">
      <button class="dialog-button" type="submit">ok</button>
      <button autofocus class="dialog-button cancel-dialog-js-3" type="reset">cancel</button>
    </div>
  </form>

</dialog>
<script>
  window.onload = () => {
    const area = document.getElementById("textarea")
    const numbering = document.querySelector('.numbering')
    fetch("/loadSettings")
      .then(response => response.json())
      .then(data => {
        console.log(data)
        area.style.fontSize = data.fontSize
        area.style.backgroundColor = data.areaBgColor
        area.style.color = data.areaColor
        numbering.style.backgroundColor = data.numberingColor
        numbering.style.fontSize = data.numberingFontSize
        area.value = area.value.trim()
      })
      .catch(error => console.log(error));
  }
  let option = 0
  const area = document.getElementById("textarea")
  const content = area.value.split("\n")
  const numbering = document.querySelector('.numbering')
  const areaMarginLeft = parseInt(window.getComputedStyle(area).getPropertyValue("margin-left").split('px')[0])
  const numberingMarginLeft = parseInt(window.getComputedStyle(numbering).getPropertyValue("margin-left").split('px')[0])
  const editFileForm = document.querySelector('.edit-file-form')
  const saveChangesBtn = document.querySelector('.save-changes')
  const hiddenAreaContent = document.querySelector('.area-content')
  let textAreaElement = document.getElementById('textarea')
  const changeNameBtn = document.querySelector('.change-name')
  const dialogChangeName = document.querySelector('.edit-folder-dialog')
  const cancelDialog = document.querySelector('.cancel-dialog-js-3')
  const saveSettingsBtn = document.querySelector('.save-settings')
  const hiddenPrevName = document.querySelector('.prev-file-name')
  const hiddenRoot = document.querySelector('.hidden-root')
  function bgToggle() {
    console.log(option)
    if (option === 0) {
      area.style.color = 'white'
      area.style.backgroundColor = 'black'
      numbering.style.backgroundColor = 'black'
      option = 1
    } else if (option === 1) {
      area.style.color = 'black'
      area.style.backgroundColor = 'white'
      numbering.style.backgroundColor = 'white'
      option = 2
    } else if (option === 2) {
      area.style.color = 'yellow'
      area.style.backgroundColor = 'rgb(8, 21, 119)'
      numbering.style.backgroundColor = 'rgb(8, 21, 119)'
      option = 3
    } else if (option === 3) {
      area.style.color = 'yellow'
      area.style.backgroundColor = 'red'
      numbering.style.backgroundColor = 'red'
      option = 4
    }
    else if (option === 4) {
      area.style.color = 'black'
      area.style.backgroundColor = 'lightgreen'
      numbering.style.backgroundColor = 'lightgreen'
      option = 0
    }


  }
  document.querySelector('.colors').addEventListener("click", () => {
    bgToggle()
  })
  function updateNumberingHeight() {
    const fontSize = parseInt(window.getComputedStyle(area).getPropertyValue("font-size").split('px')[0])
    const areaHeight = parseInt(window.getComputedStyle(area).getPropertyValue("height").split('px')[0])
    numbering.style.height = `${areaHeight}px`
    numbering.style.fontSize = `${fontSize}px`
  }

  for (let i = 1; i <= content.length; i++) {
    const p = document.createElement('p')
    p.append(i)
    numbering.appendChild(p)
  }

  updateNumberingHeight()

  let isKeyPressed = false

  document.getElementById("textarea").addEventListener("input", function () {
    console.log(area.value.split("\n").length, content.length)

    if (content.length < area.value.split("\n").length && isKeyPressed) {
      content.length++
      const p = document.createElement('p')
      p.append(area.value.split("\n").length)
      numbering.appendChild(p)
      console.log(numbering.lastChild)
    } else if (content.length > area.value.split("\n").length) {
      content.length--
      const lastChild = numbering.lastChild;
      if (lastChild) {
        lastChild.remove()
      }
    }
  });

  document.getElementById("textarea").addEventListener("keydown", function (event) {
    if (event.key === "Enter") {
      isKeyPressed = true
    }
  });

  document.getElementById("textarea").addEventListener("keyup", function (event) {
    if (event.key === "Enter") {
      isKeyPressed = false
    }
  });

  document.querySelector('.font-minus').addEventListener("click", () => {
    const fontSize = parseInt(window.getComputedStyle(area).getPropertyValue("font-size").split('px')[0])
    area.style.fontSize = `${fontSize - 1}px`
    //area.style.marginLeft = `${areaMarginLeft - 1}px`
    //numbering.style.marginLeft = `${numberingMarginLeft - 1}px`
    updateNumberingHeight()
  });

  document.querySelector('.font-plus').addEventListener("click", () => {
    const fontSize = parseInt(window.getComputedStyle(area).getPropertyValue("font-size").split('px')[0])
    area.style.fontSize = `${fontSize + 1}px`
    //area.style.marginLeft = `${parseInt(areaMarginLeft) + 1}px`
    //numbering.style.marginLeft = `${parseInt(numberingMarginLeft) + 1}px`
    updateNumberingHeight()
  });

  textarea.addEventListener("scroll", function () {
    numbering.scrollTop = textarea.scrollTop
  })
  saveChangesBtn.addEventListener("click", () => {
    alert('Zmiany zapisano pomyślnie')
    console.log(textAreaElement.value)
    hiddenAreaContent.value = textAreaElement.value.trim()
    editFileForm.action = "/editFile"
  })
  changeNameBtn.addEventListener("click", () => {
    dialogChangeName.style.display = 'flex'
    dialogChangeName.showModal()
  })
  cancelDialog.addEventListener("click", () => {
    dialogChangeName.style.display = 'none'
    dialogChangeName.close()
  })
  saveSettingsBtn.addEventListener("click", () => {
    let data = {
      fontSize: null,
      areaColor: null,
      areaBgColor: null,
      numberingColor: null,
      numberingFontSize: null
    }
    console.log(window.getComputedStyle(area).fontSize)
    console.log(window.getComputedStyle(area).color)
    console.log(window.getComputedStyle(area).backgroundColor)
    console.log(window.getComputedStyle(numbering).backgroundColor)
    data.fontSize = window.getComputedStyle(area).fontSize
    data.areaColor = window.getComputedStyle(area).color
    data.areaBgColor = window.getComputedStyle(area).backgroundColor
    data.numberingColor = window.getComputedStyle(numbering).backgroundColor
    data.numberingFontSize = window.getComputedStyle(numbering).fontSize
    alert('Zapisano pomyślnie')
    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    }
    fetch("/fileSettings", options)
      .then(response => response.json())
      .then(data => alert(JSON.stringify(data, null, 5)))
      .catch(error => console.log(error));
  })

</script>